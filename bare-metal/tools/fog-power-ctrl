#!/bin/python3

# Author: J. M. Gdaniec, Jan 2021

from lab_common import *

import argparse
import requests
import json
import sys
import threading
import traceback

from threading import Thread

class DoPowerActoin(Thread):

    def __init__(self, args, action, machine, is_multi):
       Thread.__init__(self)
       self.args = args
       self.action = action
       self.machine = machine
       self.is_multi = is_multi

    def run(self):

       args = self.args
       m = self.machine
       action = self.action
       is_multi = self.is_multi

       bmc_conn = LabBMCConnection.create_connection(m, args)
       power_state = bmc_conn.get_power_state()

       action = action.lower()
       if action in ["status", "state"]:
          if is_multi:
             blurt("%s: %s" % (m, power_state))
          else:
             blurt(power_state)

       elif action in ["forceoff", "off"]:
          msg = "Powering Off" if power_state != "Off" else "Already Off"
          if is_multi:
             blurt("%s: %s" % (m, msg))
          resp = bmc_conn.system_power_off(quiet=True)

       elif action in ["on"]:
          msg = "Powering On" if power_state != "On" else "Already On"
          if is_multi:
             blurt("%s: %s" % (m, msg))
          resp = bmc_conn.system_power_on(quiet=True)

       elif action in ["reboot"]:
          msg = "Rebooting" if power_state == "On" else "Powering On"
          if is_multi:
             blurt("%s: %s" % (m, msg))
          resp = bmc_conn.system_reboot(quiet=True)
       else:
          emsg("Unrecognized actoin: %s" % action)

# Main:

def main():

   set_dbg_volume_level(0)

   action_choices = ["status", "state", "forceoff", "off", "on", "reboot"]

   parser = argparse.ArgumentParser()
   # parser.add_argument("machine" )
   # parser.add_argument("action", nargs="?", choices=action_choices, default="status")

   parser.add_argument("arg1" )
   parser.add_argument("argn", nargs="*")

   LabBMCConnection.add_bmc_login_argument_definitions(parser)

   args = parser.parse_args()

   # Support multi-system and legacy modes of invocation
   #   fog-power-ctrl <action> <machine1> [<machine2> ...]
   #   fog-power-ctrl <machine> <action>

   if args.arg1.lower() in action_choices:
      action   = args.arg1.lower()
      machines = args.argn
   else:
      if len(args.argn) == 0:
         action = "status"
         machines = [args.arg1]
      elif len(args.argn) == 1:
         action = args.argn[0].lower()
         machines = [args.arg1]
         if not action.lower() in action_choices:
            emsg("Unrecognized action: %s" % action)
            exit(5)
      else:
         emsg("Too many arguments in legacy-mode invocation.")
         exit(5)

   is_multi = len(machines) > 1
   threads = []
   for m in machines:
      t = DoPowerActoin(args, action, m, is_multi)
      t.start()
      threads.append(t)
   for t in threads:
      t.join()

if __name__ == "__main__":
   try:
      main()
   except BMCRequestError as exc:
      die(str(exc))
   except Exception:
      traceback.print_exc()
      die("Unhandled exception!")

