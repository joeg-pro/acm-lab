#!/bin/python3

# Do a fast-init to wipe virtual disk "system" on a R340 Fog machine.
#
# Hopefully does enough queries to verify the target machine is setup
# as expected before doing the wiping.
#
# This is HIGHLY Dell Server and Fog-Machine-Setup specific!

# Author: J. M. Gdaniec, Apr 2021

from lab_common import *

import argparse
import time
import traceback


class WipeDiskTask(DellSpecificTask):

   def __init__(self, machine, bmc_conn, task_arg):
      super(WipeDiskTask, self).__init__(machine, bmc_conn)

      self.abandon = False

   @classmethod
   def get_short_task_name(self):
      return "virtual-disk-init"

   def pre_check(self):
      if not super(WipeDiskTask, self).pre_check():
         return False

      bmc_conn = self.bmc_conn

      system_res = bmc_conn.get_system_resource()

      # The storage collection id is found as the Storage property of the System resource.
      # This collection's members are the storage substytems/entities.  Each storage entity
      # has one or more controllers it its StorageControllers list (if you care about the
      # controller-level properties).  It also has a Volumes collection containing the
      # volumes, i.e. real or virtual disks.

      # Our goal is to do a fast-init of the virtual disk used as the system install disk.
      # For the Fog R340 single-node servers, this disk is the virtual disk named "system"
      # (usually the only one) on the integrated PERC H340 Adapter in the system.  Its
      # identified as Sotrage entitiy "RAID.Integrated.1-1".

      target_stg_res_inst_id = "RAID.Integrated.1-1"
      target_volume_name = "system"
      expected_stg_ctrl_models = [
         "PERC H330 Adapter",  # On our "Gen 1" R340 bare metal nodes
         "PERC H330 Mini"      # On our "Gen 2" R640 bare metal nodes
      ]

      stg_collection_id = system_res["Storage"]["@odata.id"]
      target_stg_res_id = stg_collection_id + "/" + target_stg_res_inst_id

      # Get the target Storage resource, and verifiy it represnts the kind of thing expected.

      target_stg_res = bmc_conn.get_resource(target_stg_res_id)
      dbg_echo_resource("Storage Resource", target_stg_res, level=5)
      stg_controller = target_stg_res["StorageControllers"][0]
      ctrl_model = stg_controller["Model"]
      if ctrl_model not in expected_stg_ctrl_models:
         emsg("Storage controller model \"%s\" is not as expected." % ctrl_model)
         return False

      # Find the volume with the expected volume name.

      volumes_coll_id = target_stg_res["Volumes"]["@odata.id"]
      target_vol_res = bmc_conn.get_collection_member_with_name(volumes_coll_id, target_volume_name)
      dbg_echo_resource("Volume Resource", target_vol_res, level=5)

      # Bail out if there already some operation in-progress on the volume.
      # Note:  I found this algorithm in one of the Dell examples, but I've yet to see
      # it find an in-progress operation, even when there was one.  So it may be baseed
      # on legacy behavior, or never-implemented behavior.

      in_prog_operations = target_vol_res["Operations"]
      dbg("Volume operations:\n%s" % json_dumps(in_prog_operations), level=5)
      if len(in_prog_operations) != 0:
         words = "Another operation is" if len(in_prog_operations) == 1 else "Other operations are"
         emsg("%s currently in progress on the target virtual disk." % words)
         for in_prog_op in in_prog_operations:
            op_name = in_prog_op["OperationName"]
            op_pct_complete = in_prog_op["PercentageComplete"]
            emsg("In progress operation: %s (%s percent complete)" % (op_name, op_pct_complete))
            pass
         return False

      # We should find a #Volume.Initialize" Action.  That's what we'll run.

      init_action = target_vol_res["Actions"]["#Volume.Initialize"]
      init_target = init_action["target"]
      dbg("Action target: %s" % init_target)
      self.task_target = init_target

      return True

   def get_task_body(self):
      body = dict()
      body["InitializeType"] = "Fast"
      return body

   @classmethod
   def is_multi_thread_safe(self):
      return True

   # Pre-submit, post-submit and post-completion handles that power the machine
   # machine off before submit, then power it on after submit to allow the task
   # to run, and then finallly power the machine offf again when done.

   @classmethod
   def announce_pre_submit_pass(self, machine=None):
      if machine:
         blurt("Powering machine off.", prefix=machine)
      else:
         blurt("Powering the machines off.")

   def pre_submit(self):
      return self.do_power_action("Off")

   @classmethod
   def announce_post_submit_pass(self, machine=None):
      if machine:
         blurt("Powering machine on.", prefix=machine)
      else:
         blurt("Powering the machines on.")

   def post_submit(self):
      return self.do_power_action("On")

   @classmethod
   def announce_post_completion_pass(self, machine=None):
      if machine:
         blurt("Powering machine off.", prefix=machine)
      else:
         blurt("Powering all machines off.")

   def post_completion(self):
      return self.do_power_action("Off")

   def get_task_target(self):
      # Task target found/set during pre_check() or pre_launch()
      return self.task_target


def main():

   # set_dbg_volume_level(0)

   parser = argparse.ArgumentParser()
   parser.add_argument("machines", nargs="+")
   LabBMCConnection.add_bmc_login_argument_definitions(parser)

   args     = parser.parse_args()
   machines = args.machines

   runner = TaskRunner(machines, args, WipeDiskTask, None)
   runner.run()

   exit(0)

if __name__ == "__main__":
   try:
      main()
   except BMCRequestError as exc:
      die(str(exc))
   except Exception:
      traceback.print_exc()
      die("Unhandled exception!")


# For reference.  An example of iDRAC is not ready error we sometimes git and haven't
# yet figured out a robust set of required-state checks etc. to avoid.
#
#{
#   "error": {
#      "@Message.ExtendedInfo": [
#         {
#            "Message": "iDRAC is not ready. The configuration values cannot be accessed. Please retry after a few minutes.",
#            "MessageArgs": [],
#            "MessageArgs@odata.count": 0,
#            "MessageId": "IDRAC.2.2.SWC0700",
#            "RelatedProperties": [],
#            "RelatedProperties@odata.count": 0,
#            "Resolution": "Turn off the system, Remove AC. Wait for 5 seconds. Connect AC. Turn it on.",
#            "Severity": "Critical"
#         }
#      ],
#      "code": "Base.1.7.GeneralError",
#      "message": "A general error has occurred. See ExtendedInfo for more information"
#   }
# }

