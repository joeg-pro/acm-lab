#!/bin/python3

# Do a fast-init to wipe virtual disk "system" on a R340 Fog machine.
#
# Hopefully does enough queries to verify the target machine is setup
# as expected before doing the wiping.
#
# This is HIGHLY Dell Server and Fog-Machine-Setup specific!

# Author: J. M. Gdaniec, Apr 2021

from lab_common import *

import argparse
import time
import traceback

def main():

   # set_dbg_volume_level(5)

   parser = argparse.ArgumentParser()
   parser.add_argument("machines", nargs="+")
   LabBMCConnection.add_bmc_login_argument_definitions(parser)

   args = parser.parse_args()

   machines  = args.machines

   bmc_conns = dict()
   action_targets = dict()
   task_ids = dict()
   ending_task_ress = dict()

   set_dbg_volume_level(0)

   # Open BMC connections to each of the machines and do pre-checks.

   for machine in machines:

      blurt("Opening BMC connectino with %s and doing pre-checking." % machine)

      bmc_conn = LabBMCConnection.create_connection(machine, args)
      bmc_conns[machine] = bmc_conn

      system_res = bmc_conn.get_system_resource()

      # The storage collection id is found as the Storage property of the System resource.
      # This collection's members are the storage substytems/entities.  Each storage entity
      # has one or more controllers it its StorageControllers list (if you care about the
      # controller-level properties).  It also has a Volumes collection containing the
      # volumes, i.e. real or virtual disks.

      # Our goal is to do a fast-init of the virtual disk used as the system install disk.
      # For the Fog R340 single-node servers, this disk is the virtual disk named "system"
      # (usually the only one) on the integrated PERC H340 Adapter in the system.  Its
      # identified as Sotrage entitiy "RAID.Integrated.1-1".

      target_stg_res_inst_id = "RAID.Integrated.1-1"
      target_volume_name = "system"
      expected_stg_ctrl_models = ["PERC H330 Adapter"]

      stg_collection_id = system_res["Storage"]["@odata.id"]
      target_stg_res_id = stg_collection_id + "/" + target_stg_res_inst_id

      # Get the target Storage resource, and verifiy it represnts the kind of thing expected.

      target_stg_res = bmc_conn.get_resource(target_stg_res_id)
      dbg_echo_resource("Storage Resource", target_stg_res, level=5)
      stg_controller = target_stg_res["StorageControllers"][0]
      ctrl_model = stg_controller["Model"]
      if ctrl_model not in expected_stg_ctrl_models:
         die("Storage controller model \"%s\" is not as expected." % ctrl_model)

      # Find the volume with the expected volume name.

      volumes_coll_id = target_stg_res["Volumes"]["@odata.id"]
      target_vol_res = bmc_conn.get_collection_member_with_name(volumes_coll_id, target_volume_name)
      dbg_echo_resource("Volume Resource", target_vol_res, level=5)

      # Bail out if there already some operation in-progress on the volume.

      in_prog_operations = target_vol_res["Operations"]
      dbg("Volume operations:\n%s" % json_dumps(in_prog_operations), level=5)
      if len(in_prog_operations) != 0:
         words = "Another operation is" if len(in_prog_operations) == 1 else "Other operations are"
         emsg("%s currently in progress on the target virtual disk." % words)
         for in_prog_op in in_prog_operations:
            op_name = in_prog_op["OperationName"]
            op_pct_complete = in_prog_op["PercentageComplete"]
            emsg("In progress operation: %s (%s percent complete)" % (op_name, op_pct_complete))
            pass
         die("Aborting wipe-disk request.")

      # We should find a #Volume.Initialize" Action.  That's what we'll run.

      init_action = target_vol_res["Actions"]["#Volume.Initialize"]
      init_target = init_action["target"]

      dbg("Action target: %s" % init_target)
      action_targets[machine] = init_target
   #

   # All is ok across the machines, so lets get them all working on disk-init.

   short_task_name = "virtual-disk-init"
   blurt("Starting %s across all of the machines." % short_task_name)

   target_machines = {m:None for m in machines}

   # Power all the systems off to start.

   blurt("Powering the machines off.")
   powered_a_machine_off = for_all_with_conn(target_machines, bmc_conns, power_action, "Off")
   if powered_a_machine_off:
      blurt("Pausing a bit to allow the iDRACs to finish power-off.")
      time.sleep(15)  # Really gross.  Gotta find a way to know when the machine is really off.

   # Now submit the task requests

   blurt("Submitting %s task requests." % short_task_name)

   options = dict()
   options["InitializeType"] = "Fast"

   for_all_with_conn(target_machines, bmc_conns,
                    submit_task, short_task_name, action_targets, options, task_ids)

   blurt("Pausing a bit to allow the iDRACs to catch up.")
   time.sleep(15)  # More gross.

   # Now power on the machines to get them to run the tasks.

   blurt("Powering the machines on.")
   powered_a_machine_on= for_all_with_conn(target_machines, bmc_conns, power_action, "On")

   print("Waiting for submmitted %s tasks to complete." % short_task_name)
   pending_task_ids = {m:task_ids[m] for m in target_machines}

   while pending_task_ids:
      for_all_with_conn(pending_task_ids, bmc_conns, check_task_status,
                       ending_task_ress)
      if len(pending_task_ids) > 0:
         time.sleep(15)
   #

   # All tasks have ended.  Report on completion.

   for machine in task_ids:

      bmc_conn = bmc_conns[machine]
      task_id  = task_ids[machine]
      task_res = ending_task_ress[machine]

      if task_res is not None:
         task_status = task_res["TaskStatus"]
         task_state = task_res["TaskState"]
         if task_status == "OK":
            blurt("Disk-iitialization for %s has comopleted successfully." % machine)
         else:
            blurt("Disk initialization for %s has failed.  Ending tatus/state: %s/%s" %
                  (machine, task_status, task_state))
      else:
         blurt("Disk initialize state for %s is unknown due to previous errors." % machine)
   #

   blurt("Pausing a bit to allow the system iDRACs to catch up.")
   time.sleep(10)  # Gross

   # Power off all of the systems we haven't already abandoned.
   powered_a_machine_on= for_all_with_conn(target_machines, bmc_conns, power_action, "Off")

   blurt("Finished.")


if __name__ == "__main__":
   try:
      main()
   except BMCRequestError as exc:
      die(str(exc))
   except Exception:
      traceback.print_exc()
      die("Unhandled exception!")


# For reference.  An example of iDRAC is not ready error we sometimes git and haven't
# yet figured out a robust set of required-state checks etc. to avoid.
#
#{
#   "error": {
#      "@Message.ExtendedInfo": [
#         {
#            "Message": "iDRAC is not ready. The configuration values cannot be accessed. Please retry after a few minutes.",
#            "MessageArgs": [],
#            "MessageArgs@odata.count": 0,
#            "MessageId": "IDRAC.2.2.SWC0700",
#            "RelatedProperties": [],
#            "RelatedProperties@odata.count": 0,
#            "Resolution": "Turn off the system, Remove AC. Wait for 5 seconds. Connect AC. Turn it on.",
#            "Severity": "Critical"
#         }
#      ],
#      "code": "Base.1.7.GeneralError",
#      "message": "A general error has occurred. See ExtendedInfo for more information"
#   }
# }

